/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "fragment allArtifactTree on Artifact {\n  id\n  algorithm\n  digest\n}\n\nquery ArtifactQ1 {\n  artifacts(artifactSpec: {}) {\n    ...allArtifactTree\n  }\n}\n\nquery ArtifactQ2 {\n  artifacts(\n    artifactSpec: {algorithm: \"sha256\", digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\"}\n  ) {\n    ...allArtifactTree\n  }\n}\n\nquery ArtifactQ3 {\n  artifacts(\n    artifactSpec: {digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\"}\n  ) {\n    ...allArtifactTree\n  }\n}\n\nquery ArtifactQ4 {\n  artifacts(artifactSpec: {algorithm: \"sha512\"}) {\n    ...allArtifactTree\n  }\n}\n\nquery ArtifactQ5 {\n  artifacts(artifactSpec: {digest: \"7A8F47318E4676DACB0142AFA0B83029CD7BEFD9\"}) {\n    ...allArtifactTree\n  }\n}\n\nmutation ArtifactM1 {\n  ingestArtifact(\n    artifact: {algorithm: \"md5\", digest: \"2b00042f7481c7b056c4b410d28f33cf\"}\n  ) {\n    ...allArtifactTree\n  }\n}\n\nmutation ArtifactM2 {\n  ingestArtifact(\n    artifact: {algorithm: \"md5\", digest: \"0ABCDEF0FEDCBA01234567890ABCDEF0\"}\n  ) {\n    ...allArtifactTree\n  }\n}\n\nfragment allBuilderTree on Builder {\n  id\n  uri\n}\n\nquery BuilderQ1 {\n  builders(builderSpec: {}) {\n    ...allBuilderTree\n  }\n}\n\nquery BuilderQ2 {\n  builders(\n    builderSpec: {uri: \"https://github.com/Attestations/GitHubHostedActions@v1\"}\n  ) {\n    ...allBuilderTree\n  }\n}\n\nmutation BuilderM1 {\n  ingestBuilder(\n    builder: {uri: \"https://github.com/Attestations/GitHubHostedActions@v2\"}\n  ) {\n    ...allBuilderTree\n  }\n}": types.AllArtifactTreeFragmentDoc,
    "fragment allCertifyBadTree on CertifyBad {\n  id\n  justification\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Source {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          tag\n          commit\n        }\n      }\n    }\n    ... on Artifact {\n      id\n      algorithm\n      digest\n    }\n  }\n  origin\n  collector\n}\n\nquery CertifactBadQ1 {\n  CertifyBad(certifyBadSpec: {}) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ2 {\n  CertifyBad(certifyBadSpec: {origin: \"testing backend\"}) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ3 {\n  CertifyBad(certifyBadSpec: {subject: {package: {name: \"openssl\"}}}) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ4 {\n  CertifyBad(\n    certifyBadSpec: {subject: {source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ5 {\n  CertifyBad(\n    certifyBadSpec: {subject: {artifact: {digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\", algorithm: \"sha256\"}}}\n  ) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ6 {\n  CertifyBad(\n    certifyBadSpec: {subject: {package: {name: \"openssl\"}, source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allCertifyBadTree\n  }\n}": types.AllCertifyBadTreeFragmentDoc,
    "fragment allCertifyGoodTree on CertifyGood {\n  id\n  justification\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Source {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          tag\n          commit\n        }\n      }\n    }\n    ... on Artifact {\n      id\n      algorithm\n      digest\n    }\n  }\n  origin\n  collector\n}\n\nquery CertifactGoodQ1 {\n  CertifyGood(certifyGoodSpec: {}) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ2 {\n  CertifyGood(certifyGoodSpec: {origin: \"testing backend\"}) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ3 {\n  CertifyGood(certifyGoodSpec: {subject: {package: {name: \"openssl\"}}}) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ4 {\n  CertifyGood(\n    certifyGoodSpec: {subject: {source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ5 {\n  CertifyGood(\n    certifyGoodSpec: {subject: {artifact: {digest: \"2b00042f7481c7b056c4b410d28f33cf\"}}}\n  ) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ6 {\n  CertifyGood(\n    certifyGoodSpec: {subject: {package: {name: \"openssl\"}, source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allCertifyGoodTree\n  }\n}\n\nmutation CertifyGoodM1 {\n  ingestCertifyGood(\n    subject: {artifact: {algorithm: \"md5\", digest: \"2b00042f7481c7b056c4b410d28f33cf\"}}\n    certifyGood: {justification: \"why\", origin: \"testing backend\", collector: \"there\"}\n  ) {\n    ...allCertifyGoodTree\n  }\n}\n\nmutation CertifyGoodM2 {\n  ingestCertifyGood(\n    subject: {artifact: {algorithm: \"md5\", digest: \"0ABCDEF0FEDCBA01234567890ABCDEF0\"}}\n    certifyGood: {justification: \"why2\", origin: \"testing backend\", collector: \"there\"}\n  ) {\n    ...allCertifyGoodTree\n  }\n}": types.AllCertifyGoodTreeFragmentDoc,
    "fragment allCertifyScorecardTree on CertifyScorecard {\n  id\n  source {\n    ...allSrcTree\n  }\n  scorecard {\n    timeScanned\n    aggregateScore\n    checks {\n      check\n      score\n    }\n    scorecardVersion\n    scorecardCommit\n    origin\n    collector\n  }\n}\n\nquery ScorecardQ1 {\n  scorecards(scorecardSpec: {}) {\n    ...allCertifyScorecardTree\n  }\n}\n\nquery ScorecardQ2 {\n  scorecards(scorecardSpec: {origin: \"testing backend\"}) {\n    ...allCertifyScorecardTree\n  }\n}\n\nquery ScorecardQ3 {\n  scorecards(scorecardSpec: {source: {name: \"github.com/tensorflow/tensorflow\"}}) {\n    ...allCertifyScorecardTree\n  }\n}\n\nquery ScorecardQ4 {\n  scorecards(scorecardSpec: {aggregateScore: 2.9}) {\n    ...allCertifyScorecardTree\n  }\n}\n\nmutation Scorecard($source: SourceInputSpec!, $scorecard: ScorecardInputSpec!) {\n  ingestSource(source: $source) {\n    ...allSrcTree\n  }\n  certifyScorecard(source: $source, scorecard: $scorecard) {\n    ...allCertifyScorecardTree\n  }\n}": types.AllCertifyScorecardTreeFragmentDoc,
    "fragment allCertifyVEXStatementTree on CertifyVEXStatement {\n  id\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Artifact {\n      id\n      algorithm\n      digest\n    }\n  }\n  vulnerability {\n    __typename\n    ... on CVE {\n      id\n      year\n      cveId\n    }\n    ... on OSV {\n      id\n      osvId\n    }\n    ... on GHSA {\n      id\n      ghsaId\n    }\n  }\n  status\n  vexJustification\n  statement\n  statusNotes\n  knownSince\n  origin\n  collector\n}\n\nquery CertifyVEXStatementQ1 {\n  CertifyVEXStatement(certifyVEXStatementSpec: {}) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ2 {\n  CertifyVEXStatement(certifyVEXStatementSpec: {origin: \"testing backend\"}) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ3 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {subject: {package: {name: \"openssl\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ4 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {subject: {artifact: {algorithm: \"sha256\", digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ5 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {cve: {cveId: \"CVE-2019-13110\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ6 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {ghsa: {ghsaId: \"GHSA-h45f-rjvw-2rv2\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ7 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {cve: {cveId: \"CVE-2018-43610\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ8 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {ghsa: {ghsaId: \"GHSA-hj5f-4gvw-4rv2\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ9 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {osv: {osvId: \"cve-2019-14750\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ10 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {osv: {osvId: \"cve-2018-15710\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}": types.AllCertifyVexStatementTreeFragmentDoc,
    "fragment allCertifyVulnTree on CertifyVuln {\n  id\n  package {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  vulnerability {\n    __typename\n    ... on CVE {\n      id\n      year\n      cveId\n    }\n    ... on OSV {\n      id\n      osvId\n    }\n    ... on GHSA {\n      id\n      ghsaId\n    }\n    ... on NoVuln {\n      id\n    }\n  }\n  metadata {\n    dbUri\n    dbVersion\n    scannerUri\n    scannerVersion\n    timeScanned\n    origin\n    collector\n  }\n}\n\nquery CertifyVulnQ1 {\n  CertifyVuln(certifyVulnSpec: {}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ2 {\n  CertifyVuln(certifyVulnSpec: {origin: \"testing backend\"}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ3 {\n  CertifyVuln(certifyVulnSpec: {package: {name: \"openssl\"}}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ4 {\n  CertifyVuln(certifyVulnSpec: {package: {name: \"django\"}}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ5 {\n  CertifyVuln(certifyVulnSpec: {vulnerability: {cve: {cveId: \"CVE-2019-13110\"}}}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ6 {\n  CertifyVuln(\n    certifyVulnSpec: {vulnerability: {ghsa: {ghsaId: \"GHSA-h45f-rjvw-2rv2\"}}}\n  ) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ7 {\n  CertifyVuln(certifyVulnSpec: {vulnerability: {osv: {osvId: \"CVE-2019-13110\"}}}) {\n    ...allCertifyVulnTree\n  }\n}": types.AllCertifyVulnTreeFragmentDoc,
    "fragment allCveTree on CVE {\n  id\n  year\n  cveId\n}\n\nfragment allGHSATree on GHSA {\n  id\n  ghsaId\n}\n\nfragment allOSVTree on OSV {\n  id\n  osvId\n}\n\nquery CVEQ1 {\n  cve(cveSpec: {}) {\n    ...allCveTree\n  }\n}\n\nquery CVEQ2 {\n  cve(cveSpec: {year: 2014}) {\n    ...allCveTree\n  }\n}\n\nquery CVEQ3 {\n  cve(cveSpec: {cveId: \"CVE-2014-8139\"}) {\n    ...allCveTree\n  }\n}\n\nquery CVEQ4 {\n  cve(cveSpec: {year: 2014, cveId: \"CVE-2014-8140\"}) {\n    ...allCveTree\n  }\n}\n\nmutation CVEM1 {\n  ingestCVE(cve: {year: 2023, cveId: \"CVE-2023-12345\"}) {\n    ...allCveTree\n  }\n}\n\nmutation CVEM2 {\n  ingestCVE(cve: {year: 2032, cveId: \"cve-2032-12345\"}) {\n    ...allCveTree\n  }\n}\n\nquery GHSAQ1 {\n  ghsa(ghsaSpec: {}) {\n    ...allGHSATree\n  }\n}\n\nquery GHSAQ2 {\n  ghsa(ghsaSpec: {ghsaId: \"GHSA-h45f-rjvw-2rv2\"}) {\n    ...allGHSATree\n  }\n}\n\nmutation GHSAM1 {\n  ingestGHSA(ghsa: {ghsaId: \"GHSA-abcd-efgh-1234\"}) {\n    ...allGHSATree\n  }\n}\n\nquery OSVQ1 {\n  osv(osvSpec: {}) {\n    ...allOSVTree\n  }\n}\n\nquery OSVQ2 {\n  osv(osvSpec: {osvId: \"CVE-2014-8139\"}) {\n    ...allOSVTree\n  }\n}\n\nquery OSVQ3 {\n  osv(osvSpec: {osvId: \"ghsa-h45f-rjvw-2rv2\"}) {\n    ...allOSVTree\n  }\n}\n\nmutation OSVM1 {\n  ingestOSV(osv: {osvId: \"GHSA-abcd-efgh-1234\"}) {\n    ...allOSVTree\n  }\n}\n\nmutation OSVM2 {\n  ingestOSV(osv: {osvId: \"CVE-2023-12345\"}) {\n    ...allOSVTree\n  }\n}": types.AllCveTreeFragmentDoc,
    "fragment allHasSBOMTree on HasSBOM {\n  id\n  uri\n  annotation\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Source {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          tag\n          commit\n        }\n      }\n    }\n  }\n  origin\n  collector\n}\n\nquery HasSBOMQ1 {\n  HasSBOM(hasSBOMSpec: {}) {\n    ...allHasSBOMTree\n  }\n}\n\nquery HasSBOMQ2 {\n  HasSBOM(hasSBOMSpec: {origin: \"testing backend\"}) {\n    ...allHasSBOMTree\n  }\n}\n\nquery HasSBOMQ3 {\n  HasSBOM(hasSBOMSpec: {subject: {package: {name: \"openssl\"}}}) {\n    ...allHasSBOMTree\n  }\n}\n\nquery HasSBOMQ4 {\n  HasSBOM(hasSBOMSpec: {subject: {source: {name: \"github.com/guacsec/guac\"}}}) {\n    ...allHasSBOMTree\n  }\n}\n\nquery HasSBOMQ5 {\n  HasSBOM(\n    hasSBOMSpec: {subject: {package: {name: \"openssl\"}, source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allHasSBOMTree\n  }\n}": types.AllHasSbomTreeFragmentDoc,
    "fragment allHasSLSATree on HasSLSA {\n  id\n  subject {\n    id\n    algorithm\n    digest\n  }\n  slsa {\n    builtFrom {\n      id\n      algorithm\n      digest\n    }\n    builtBy {\n      id\n      uri\n    }\n    buildType\n    slsaPredicate {\n      key\n      value\n    }\n    slsaVersion\n    startedOn\n    finishedOn\n    origin\n    collector\n  }\n}\n\nquery SLSAQ1 {\n  HasSLSA(hasSLSASpec: {}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ2 {\n  HasSLSA(hasSLSASpec: {origin: \"Demo ingestion\"}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ3 {\n  HasSLSA(hasSLSASpec: {subject: {algorithm: \"sha1\"}}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ4 {\n  HasSLSA(hasSLSASpec: {builtFrom: [{algorithm: \"sha256\"}]}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ5 {\n  HasSLSA(hasSLSASpec: {id: \"47\"}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ6 {\n  HasSLSA(\n    hasSLSASpec: {predicate: {key: \"buildDefinition.externalParameters.ref\", value: \"refs/heads/main\"}}\n  ) {\n    ...allHasSLSATree\n  }\n}\n\nfragment allArtifactTree on Artifact {\n  id\n  algorithm\n  digest\n}\n\nmutation SLSAM1 {\n  ingestSLSA(\n    subject: {algorithm: \"md5\", digest: \"2b00042f7481c7b056c4b410d28f33cf\"}\n    builtFrom: [{algorithm: \"md5\", digest: \"0ABCDEF0FEDCBA01234567890ABCDEF0\"}]\n    builtBy: {uri: \"https://github.com/Attestations/GitHubHostedActions@v2\"}\n    slsa: {buildType: \"type\", slsaVersion: \"v1\", origin: \"here\", collector: \"there\", startedOn: \"2023-03-28T11:01:23-07:00\", finishedOn: \"2023-03-28T11:01:35-07:00\", slsaPredicate: [{key: \"key1\", value: \"value1\"}]}\n  ) {\n    ...allHasSLSATree\n  }\n}": types.AllHasSlsaTreeFragmentDoc,
    "fragment allHasSourceAtTree on HasSourceAt {\n  id\n  justification\n  knownSince\n  package {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  source {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        tag\n        commit\n      }\n    }\n  }\n  origin\n  collector\n}\n\nquery HasSourceAtQ1 {\n  HasSourceAt(hasSourceAtSpec: {}) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ2 {\n  HasSourceAt(hasSourceAtSpec: {origin: \"testing backend\"}) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ3 {\n  HasSourceAt(hasSourceAtSpec: {package: {name: \"openssl\", version: \"3.0.3\"}}) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ4 {\n  HasSourceAt(\n    hasSourceAtSpec: {source: {name: \"https://github.com/django/django\"}}\n  ) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ5 {\n  HasSourceAt(hasSourceAtSpec: {package: {name: \"kubetest\"}}) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ6 {\n  HasSourceAt(\n    hasSourceAtSpec: {source: {name: \"https://github.com/vapor-ware/kubetest\"}}\n  ) {\n    ...allHasSourceAtTree\n  }\n}": types.AllHasSourceAtTreeFragmentDoc,
    "fragment allHashEqualTree on HashEqual {\n  id\n  justification\n  artifacts {\n    id\n    algorithm\n    digest\n  }\n  origin\n  collector\n}\n\nquery HashEqualQ1 {\n  HashEqual(hashEqualSpec: {}) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ2 {\n  HashEqual(hashEqualSpec: {origin: \"testing backend\"}) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ3 {\n  HashEqual(\n    hashEqualSpec: {artifacts: [{algorithm: \"sha1\", digest: \"7a8f47318e4676dacb0142afa0b83029cd7befd9\"}]}\n  ) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ4 {\n  HashEqual(\n    hashEqualSpec: {artifacts: [{algorithm: \"sha256\", digest: \"89bb0da1891646e58eb3e6ed24f3a6fc3c8eb5a0d44824cba581dfa34a0450cf\"}]}\n  ) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ5 {\n  HashEqual(\n    hashEqualSpec: {artifacts: [{algorithm: \"sha256\", digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\"}]}\n  ) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ6 {\n  HashEqual(\n    hashEqualSpec: {artifacts: [{algorithm: \"sha512\", digest: \"374ab8f711235830769aa5f0b31ce9b72c5670074b34cb302cdafe3b606233ee92ee01e298e5701f15cc7087714cd9abd7ddb838a6e1206b3642de16d9fc9dd7\"}]}\n  ) {\n    ...allHashEqualTree\n  }\n}": types.AllHashEqualTreeFragmentDoc,
    "fragment allIsDependencyTree on IsDependency {\n  id\n  justification\n  package {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  dependentPackage {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  versionRange\n  origin\n  collector\n}\n\nquery IsDepedencyQ1 {\n  IsDependency(isDependencySpec: {}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ2 {\n  IsDependency(isDependencySpec: {origin: \"testing backend\"}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ3 {\n  IsDependency(isDependencySpec: {package: {name: \"debian\"}}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ4 {\n  IsDependency(isDependencySpec: {package: {name: \"dpkg\"}}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ5 {\n  IsDependency(isDependencySpec: {package: {name: \"openssl\", version: \"3.0.3\"}}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ6 {\n  IsDependency(isDependencySpec: {dependentPackage: {name: \"openssl\"}}) {\n    ...allIsDependencyTree\n  }\n}": types.AllIsDependencyTreeFragmentDoc,
    "fragment allIsOccurrencesTree on IsOccurrence {\n  id\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Source {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          tag\n          commit\n        }\n      }\n    }\n  }\n  artifact {\n    id\n    algorithm\n    digest\n  }\n  justification\n  origin\n  collector\n}\n\nquery IsOccurrenceQ1 {\n  IsOccurrence(isOccurrenceSpec: {}) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ2 {\n  IsOccurrence(isOccurrenceSpec: {origin: \"testing backend\"}) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ3 {\n  IsOccurrence(isOccurrenceSpec: {subject: {package: {name: \"openssl\"}}}) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ4 {\n  IsOccurrence(\n    isOccurrenceSpec: {subject: {package: {name: \"openssl\", version: \"3.0.3\"}}}\n  ) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ5 {\n  IsOccurrence(\n    isOccurrenceSpec: {subject: {source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ6 {\n  IsOccurrence(\n    isOccurrenceSpec: {subject: {package: {name: \"openssl\"}, source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allIsOccurrencesTree\n  }\n}": types.AllIsOccurrencesTreeFragmentDoc,
    "fragment allIsVulnerabilityTree on IsVulnerability {\n  id\n  osv {\n    id\n    osvId\n  }\n  vulnerability {\n    __typename\n    ... on CVE {\n      id\n      year\n      cveId\n    }\n    ... on GHSA {\n      id\n      ghsaId\n    }\n  }\n  justification\n  origin\n  collector\n}\n\nquery IsVulnerabilityQ1 {\n  IsVulnerability(isVulnerabilitySpec: {}) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ2 {\n  IsVulnerability(isVulnerabilitySpec: {origin: \"testing backend\"}) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ3 {\n  IsVulnerability(isVulnerabilitySpec: {osv: {osvId: \"GHSA-h45f-rjvw-2rv2\"}}) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ4 {\n  IsVulnerability(isVulnerabilitySpec: {osv: {osvId: \"CVE-2019-13110\"}}) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ5 {\n  IsVulnerability(\n    isVulnerabilitySpec: {vulnerability: {cve: {cveId: \"CVE-2019-13110\"}}}\n  ) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ6 {\n  IsVulnerability(\n    isVulnerabilitySpec: {vulnerability: {ghsa: {ghsaId: \"GHSA-h45f-rjvw-2rv2\"}}}\n  ) {\n    ...allIsVulnerabilityTree\n  }\n}": types.AllIsVulnerabilityTreeFragmentDoc,
    "fragment allPkgTree on Package {\n  id\n  type\n  namespaces {\n    id\n    namespace\n    names {\n      id\n      name\n      versions {\n        id\n        version\n        qualifiers {\n          key\n          value\n        }\n        subpath\n      }\n    }\n  }\n}\n\nquery PkgQ1 {\n  packages(pkgSpec: {}) {\n    type\n    namespaces {\n      namespace\n      names {\n        name\n      }\n    }\n  }\n}\n\nquery PkgQ2 {\n  packages(pkgSpec: {}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ3 {\n  packages(pkgSpec: {type: \"pypi\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ4 {\n  packages(pkgSpec: {type: \"pypi\", namespace: \"debian\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ5 {\n  packages(pkgSpec: {type: \"deb\", namespace: \"debian\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ6 {\n  packages(pkgSpec: {type: \"deb\", namespace: \"ubuntu\", name: \"dpkg\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ7 {\n  packages(pkgSpec: {type: \"deb\", name: \"dpkg\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ8 {\n  packages(pkgSpec: {name: \"openssl\", version: \"3.0.3\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ9 {\n  packages(pkgSpec: {name: \"openssl\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQA {\n  packages(pkgSpec: {qualifiers: [{key: \"arch\", value: \"amd64\"}]}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQB {\n  packages(\n    pkgSpec: {qualifiers: [{key: \"arch\", value: \"amd64\"}, {key: \"distro\", value: \"stretch\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQC {\n  packages(pkgSpec: {subpath: \"subpath\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQD {\n  packages(pkgSpec: {matchOnlyEmptyQualifiers: true}) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM1 {\n  ingestPackage(pkg: {type: \"pypi\", name: \"tensorflow\"}) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM2 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", qualifiers: [{key: \"arch\", value: \"amd64\"}, {key: \"distro\", value: \"stretch\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM3 {\n  ingestPackage(pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\"}) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM4 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\", qualifiers: [{key: \"arch\", value: \"amd64\"}, {key: \"distro\", value: \"stretch\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM5 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\", qualifiers: [{key: \"distro\", value: \"stretch\"}, {key: \"arch\", value: \"amd64\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM6 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\", subpath: \"foo\", qualifiers: [{key: \"distro\", value: \"stretch\"}, {key: \"arch\", value: \"amd64\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM7 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\", subpath: \"foo\", qualifiers: [{key: \"distro\", value: \"stretch\"}, {key: \"arch\", value: \"amd64\"}]}\n  ) {\n    namespaces {\n      names {\n        versions {\n          qualifiers {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n}": types.AllPkgTreeFragmentDoc,
    "fragment allPkgEqualTree on PkgEqual {\n  id\n  justification\n  packages {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  origin\n  collector\n}\n\nquery PkgEqualQ1 {\n  PkgEqual(pkgEqualSpec: {}) {\n    ...allPkgEqualTree\n  }\n}\n\nquery PkgEqualQ2 {\n  PkgEqual(pkgEqualSpec: {origin: \"Demo ingestion\"}) {\n    ...allPkgEqualTree\n  }\n}\n\nquery PkgEqualQ3 {\n  PkgEqual(\n    pkgEqualSpec: {packages: {type: \"conan\", namespace: \"openssl.org\", name: \"openssl\", version: \"3.0.3\", subpath: \"\"}}\n  ) {\n    ...allPkgEqualTree\n  }\n}\n\nquery PkgEqualQ4 {\n  PkgEqual(\n    pkgEqualSpec: {packages: {type: \"pypi\", namespace: \"\", name: \"django\", version: \"1.11.1\", subpath: \"subpath\"}}\n  ) {\n    ...allPkgEqualTree\n  }\n}\n\nquery PkgEqualQ5 {\n  PkgEqual(pkgEqualSpec: {packages: {type: \"deb\", namespace: \"debian\"}}) {\n    ...allPkgEqualTree\n  }\n}": types.AllPkgEqualTreeFragmentDoc,
    "fragment allSrcTree on Source {\n  id\n  type\n  namespaces {\n    id\n    namespace\n    names {\n      id\n      name\n      tag\n      commit\n    }\n  }\n}\n\nquery SrcQ1 {\n  sources(sourceSpec: {}) {\n    namespaces {\n      names {\n        name\n      }\n    }\n  }\n}\n\nquery SrcQ2 {\n  sources(sourceSpec: {}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ3 {\n  sources(sourceSpec: {tag: \"\", commit: \"\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ4 {\n  sources(sourceSpec: {name: \"github.com/guacsec/guac\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ5 {\n  sources(sourceSpec: {tag: \"v0.0.1\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ6 {\n  sources(sourceSpec: {commit: \"fcba958b73e27cad8b5c8655d46439984d27853b\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ7 {\n  sources(sourceSpec: {type: \"svn\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ8 {\n  sources(sourceSpec: {namespace: \"gitlab\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ9 {\n  sources(sourceSpec: {tag: \"asd\", commit: \"sad\"}) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM1 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\"}\n  ) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM2 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", commit: \"4fd637ad9d674c88c50d56a5d47cd77f6032e609\"}\n  ) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM3 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", tag: \"v2.12.0\"}\n  ) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM4 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", commit: \"4fd637ad9d674c88c50d56a5d47cd77f6032e609\", tag: \"2.12.0\"}\n  ) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM5 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", tag: \"v2.12.0\"}\n  ) {\n    namespaces {\n      names {\n        name\n      }\n    }\n  }\n}\n\nmutation SrcM6 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", commit: \"\", tag: \"v2.12.0\"}\n  ) {\n    ...allSrcTree\n  }\n}": types.AllSrcTreeFragmentDoc,
    "query GetPkg($spec: PkgSpec) {\n  packages(pkgSpec: $spec) {\n    ...allPkgTree\n  }\n}\n\nquery GetPkgTypes {\n  packages(pkgSpec: {}) {\n    type\n  }\n}\n\nquery GetPkgNamespaces($spec: PkgSpec) {\n  packages(pkgSpec: $spec) {\n    type\n    namespaces {\n      namespace\n    }\n  }\n}\n\nquery GetPkgNames($spec: PkgSpec) {\n  packages(pkgSpec: $spec) {\n    type\n    namespaces {\n      namespace\n      names {\n        name\n      }\n    }\n  }\n}\n\nquery GetPkgVersions($spec: PkgSpec) {\n  packages(pkgSpec: $spec) {\n    type\n    namespaces {\n      namespace\n      names {\n        name\n        versions {\n          version\n          qualifiers {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetSrc($spec: SourceSpec) {\n  sources(sourceSpec: $spec) {\n    ...allSrcTree\n  }\n}\n\nquery GetArtifact($spec: ArtifactSpec) {\n  artifacts(artifactSpec: $spec) {\n    ...allArtifactTree\n  }\n}\n\nquery GetCve($spec: CVESpec) {\n  cve(cveSpec: $spec) {\n    ...allCveTree\n  }\n}\n\nquery GetIsDepedency($spec: IsDependencySpec) {\n  IsDependency(isDependencySpec: $spec) {\n    ...allIsDependencyTree\n  }\n}\n\nquery GetIsOccurrence($spec: IsOccurrenceSpec) {\n  IsOccurrence(isOccurrenceSpec: $spec) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery GetHasSourceAt($spec: HasSourceAtSpec) {\n  HasSourceAt(hasSourceAtSpec: $spec) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery GetCertifyVuln($spec: CertifyVulnSpec) {\n  CertifyVuln(certifyVulnSpec: $spec) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery GetCertifyBad($spec: CertifyBadSpec) {\n  CertifyBad(certifyBadSpec: $spec) {\n    ...allCertifyBadTree\n  }\n}\n\nquery GetCertifyGood($spec: CertifyGoodSpec) {\n  CertifyGood(certifyGoodSpec: $spec) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery GetNeighbors($nodeId: ID!, $edges: [Edge!]!) {\n  neighbors(node: $nodeId, usingOnly: $edges) {\n    __typename\n    ... on Package {\n      ...allPkgTree\n    }\n    ... on Source {\n      ...allSrcTree\n    }\n    ... on Artifact {\n      ...allArtifactTree\n    }\n    ... on Builder {\n      ...allBuilderTree\n    }\n    ... on OSV {\n      ...allOSVTree\n    }\n    ... on CVE {\n      ...allCveTree\n    }\n    ... on GHSA {\n      ...allGHSATree\n    }\n    ... on NoVuln {\n      id\n    }\n    ... on IsOccurrence {\n      ...allIsOccurrencesTree\n    }\n    ... on IsDependency {\n      ...allIsDependencyTree\n    }\n    ... on IsVulnerability {\n      ...allIsVulnerabilityTree\n    }\n    ... on CertifyVEXStatement {\n      ...allCertifyVEXStatementTree\n    }\n    ... on HashEqual {\n      ...allHashEqualTree\n    }\n    ... on CertifyBad {\n      ...allCertifyBadTree\n    }\n    ... on CertifyGood {\n      ...allCertifyGoodTree\n    }\n    ... on CertifyBad {\n      ...allCertifyBadTree\n    }\n    ... on PkgEqual {\n      ...allPkgEqualTree\n    }\n    ... on CertifyScorecard {\n      ...allCertifyScorecardTree\n    }\n    ... on CertifyVuln {\n      ...allCertifyVulnTree\n    }\n    ... on HasSourceAt {\n      ...allHasSourceAtTree\n    }\n    ... on HasSBOM {\n      ...allHasSBOMTree\n    }\n    ... on HasSLSA {\n      ...allHasSLSATree\n    }\n  }\n}\n\nquery GetNode($nodeId: ID!) {\n  node(node: $nodeId) {\n    __typename\n    ... on Package {\n      ...allPkgTree\n    }\n    ... on Source {\n      ...allSrcTree\n    }\n    ... on Artifact {\n      ...allArtifactTree\n    }\n    ... on Builder {\n      ...allBuilderTree\n    }\n    ... on OSV {\n      ...allOSVTree\n    }\n    ... on CVE {\n      ...allCveTree\n    }\n    ... on GHSA {\n      ...allGHSATree\n    }\n    ... on NoVuln {\n      id\n    }\n    ... on IsOccurrence {\n      ...allIsOccurrencesTree\n    }\n    ... on IsDependency {\n      ...allIsDependencyTree\n    }\n    ... on IsVulnerability {\n      ...allIsVulnerabilityTree\n    }\n    ... on CertifyVEXStatement {\n      ...allCertifyVEXStatementTree\n    }\n    ... on HashEqual {\n      ...allHashEqualTree\n    }\n    ... on CertifyBad {\n      ...allCertifyBadTree\n    }\n    ... on CertifyGood {\n      ...allCertifyGoodTree\n    }\n    ... on CertifyBad {\n      ...allCertifyBadTree\n    }\n    ... on PkgEqual {\n      ...allPkgEqualTree\n    }\n    ... on CertifyScorecard {\n      ...allCertifyScorecardTree\n    }\n    ... on CertifyVuln {\n      ...allCertifyVulnTree\n    }\n    ... on HasSourceAt {\n      ...allHasSourceAtTree\n    }\n    ... on HasSBOM {\n      ...allHasSBOMTree\n    }\n    ... on HasSLSA {\n      ...allHasSLSATree\n    }\n  }\n}": types.GetPkgDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allArtifactTree on Artifact {\n  id\n  algorithm\n  digest\n}\n\nquery ArtifactQ1 {\n  artifacts(artifactSpec: {}) {\n    ...allArtifactTree\n  }\n}\n\nquery ArtifactQ2 {\n  artifacts(\n    artifactSpec: {algorithm: \"sha256\", digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\"}\n  ) {\n    ...allArtifactTree\n  }\n}\n\nquery ArtifactQ3 {\n  artifacts(\n    artifactSpec: {digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\"}\n  ) {\n    ...allArtifactTree\n  }\n}\n\nquery ArtifactQ4 {\n  artifacts(artifactSpec: {algorithm: \"sha512\"}) {\n    ...allArtifactTree\n  }\n}\n\nquery ArtifactQ5 {\n  artifacts(artifactSpec: {digest: \"7A8F47318E4676DACB0142AFA0B83029CD7BEFD9\"}) {\n    ...allArtifactTree\n  }\n}\n\nmutation ArtifactM1 {\n  ingestArtifact(\n    artifact: {algorithm: \"md5\", digest: \"2b00042f7481c7b056c4b410d28f33cf\"}\n  ) {\n    ...allArtifactTree\n  }\n}\n\nmutation ArtifactM2 {\n  ingestArtifact(\n    artifact: {algorithm: \"md5\", digest: \"0ABCDEF0FEDCBA01234567890ABCDEF0\"}\n  ) {\n    ...allArtifactTree\n  }\n}\n\nfragment allBuilderTree on Builder {\n  id\n  uri\n}\n\nquery BuilderQ1 {\n  builders(builderSpec: {}) {\n    ...allBuilderTree\n  }\n}\n\nquery BuilderQ2 {\n  builders(\n    builderSpec: {uri: \"https://github.com/Attestations/GitHubHostedActions@v1\"}\n  ) {\n    ...allBuilderTree\n  }\n}\n\nmutation BuilderM1 {\n  ingestBuilder(\n    builder: {uri: \"https://github.com/Attestations/GitHubHostedActions@v2\"}\n  ) {\n    ...allBuilderTree\n  }\n}"): (typeof documents)["fragment allArtifactTree on Artifact {\n  id\n  algorithm\n  digest\n}\n\nquery ArtifactQ1 {\n  artifacts(artifactSpec: {}) {\n    ...allArtifactTree\n  }\n}\n\nquery ArtifactQ2 {\n  artifacts(\n    artifactSpec: {algorithm: \"sha256\", digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\"}\n  ) {\n    ...allArtifactTree\n  }\n}\n\nquery ArtifactQ3 {\n  artifacts(\n    artifactSpec: {digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\"}\n  ) {\n    ...allArtifactTree\n  }\n}\n\nquery ArtifactQ4 {\n  artifacts(artifactSpec: {algorithm: \"sha512\"}) {\n    ...allArtifactTree\n  }\n}\n\nquery ArtifactQ5 {\n  artifacts(artifactSpec: {digest: \"7A8F47318E4676DACB0142AFA0B83029CD7BEFD9\"}) {\n    ...allArtifactTree\n  }\n}\n\nmutation ArtifactM1 {\n  ingestArtifact(\n    artifact: {algorithm: \"md5\", digest: \"2b00042f7481c7b056c4b410d28f33cf\"}\n  ) {\n    ...allArtifactTree\n  }\n}\n\nmutation ArtifactM2 {\n  ingestArtifact(\n    artifact: {algorithm: \"md5\", digest: \"0ABCDEF0FEDCBA01234567890ABCDEF0\"}\n  ) {\n    ...allArtifactTree\n  }\n}\n\nfragment allBuilderTree on Builder {\n  id\n  uri\n}\n\nquery BuilderQ1 {\n  builders(builderSpec: {}) {\n    ...allBuilderTree\n  }\n}\n\nquery BuilderQ2 {\n  builders(\n    builderSpec: {uri: \"https://github.com/Attestations/GitHubHostedActions@v1\"}\n  ) {\n    ...allBuilderTree\n  }\n}\n\nmutation BuilderM1 {\n  ingestBuilder(\n    builder: {uri: \"https://github.com/Attestations/GitHubHostedActions@v2\"}\n  ) {\n    ...allBuilderTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allCertifyBadTree on CertifyBad {\n  id\n  justification\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Source {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          tag\n          commit\n        }\n      }\n    }\n    ... on Artifact {\n      id\n      algorithm\n      digest\n    }\n  }\n  origin\n  collector\n}\n\nquery CertifactBadQ1 {\n  CertifyBad(certifyBadSpec: {}) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ2 {\n  CertifyBad(certifyBadSpec: {origin: \"testing backend\"}) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ3 {\n  CertifyBad(certifyBadSpec: {subject: {package: {name: \"openssl\"}}}) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ4 {\n  CertifyBad(\n    certifyBadSpec: {subject: {source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ5 {\n  CertifyBad(\n    certifyBadSpec: {subject: {artifact: {digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\", algorithm: \"sha256\"}}}\n  ) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ6 {\n  CertifyBad(\n    certifyBadSpec: {subject: {package: {name: \"openssl\"}, source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allCertifyBadTree\n  }\n}"): (typeof documents)["fragment allCertifyBadTree on CertifyBad {\n  id\n  justification\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Source {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          tag\n          commit\n        }\n      }\n    }\n    ... on Artifact {\n      id\n      algorithm\n      digest\n    }\n  }\n  origin\n  collector\n}\n\nquery CertifactBadQ1 {\n  CertifyBad(certifyBadSpec: {}) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ2 {\n  CertifyBad(certifyBadSpec: {origin: \"testing backend\"}) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ3 {\n  CertifyBad(certifyBadSpec: {subject: {package: {name: \"openssl\"}}}) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ4 {\n  CertifyBad(\n    certifyBadSpec: {subject: {source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ5 {\n  CertifyBad(\n    certifyBadSpec: {subject: {artifact: {digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\", algorithm: \"sha256\"}}}\n  ) {\n    ...allCertifyBadTree\n  }\n}\n\nquery CertifactBadQ6 {\n  CertifyBad(\n    certifyBadSpec: {subject: {package: {name: \"openssl\"}, source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allCertifyBadTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allCertifyGoodTree on CertifyGood {\n  id\n  justification\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Source {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          tag\n          commit\n        }\n      }\n    }\n    ... on Artifact {\n      id\n      algorithm\n      digest\n    }\n  }\n  origin\n  collector\n}\n\nquery CertifactGoodQ1 {\n  CertifyGood(certifyGoodSpec: {}) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ2 {\n  CertifyGood(certifyGoodSpec: {origin: \"testing backend\"}) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ3 {\n  CertifyGood(certifyGoodSpec: {subject: {package: {name: \"openssl\"}}}) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ4 {\n  CertifyGood(\n    certifyGoodSpec: {subject: {source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ5 {\n  CertifyGood(\n    certifyGoodSpec: {subject: {artifact: {digest: \"2b00042f7481c7b056c4b410d28f33cf\"}}}\n  ) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ6 {\n  CertifyGood(\n    certifyGoodSpec: {subject: {package: {name: \"openssl\"}, source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allCertifyGoodTree\n  }\n}\n\nmutation CertifyGoodM1 {\n  ingestCertifyGood(\n    subject: {artifact: {algorithm: \"md5\", digest: \"2b00042f7481c7b056c4b410d28f33cf\"}}\n    certifyGood: {justification: \"why\", origin: \"testing backend\", collector: \"there\"}\n  ) {\n    ...allCertifyGoodTree\n  }\n}\n\nmutation CertifyGoodM2 {\n  ingestCertifyGood(\n    subject: {artifact: {algorithm: \"md5\", digest: \"0ABCDEF0FEDCBA01234567890ABCDEF0\"}}\n    certifyGood: {justification: \"why2\", origin: \"testing backend\", collector: \"there\"}\n  ) {\n    ...allCertifyGoodTree\n  }\n}"): (typeof documents)["fragment allCertifyGoodTree on CertifyGood {\n  id\n  justification\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Source {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          tag\n          commit\n        }\n      }\n    }\n    ... on Artifact {\n      id\n      algorithm\n      digest\n    }\n  }\n  origin\n  collector\n}\n\nquery CertifactGoodQ1 {\n  CertifyGood(certifyGoodSpec: {}) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ2 {\n  CertifyGood(certifyGoodSpec: {origin: \"testing backend\"}) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ3 {\n  CertifyGood(certifyGoodSpec: {subject: {package: {name: \"openssl\"}}}) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ4 {\n  CertifyGood(\n    certifyGoodSpec: {subject: {source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ5 {\n  CertifyGood(\n    certifyGoodSpec: {subject: {artifact: {digest: \"2b00042f7481c7b056c4b410d28f33cf\"}}}\n  ) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery CertifactGoodQ6 {\n  CertifyGood(\n    certifyGoodSpec: {subject: {package: {name: \"openssl\"}, source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allCertifyGoodTree\n  }\n}\n\nmutation CertifyGoodM1 {\n  ingestCertifyGood(\n    subject: {artifact: {algorithm: \"md5\", digest: \"2b00042f7481c7b056c4b410d28f33cf\"}}\n    certifyGood: {justification: \"why\", origin: \"testing backend\", collector: \"there\"}\n  ) {\n    ...allCertifyGoodTree\n  }\n}\n\nmutation CertifyGoodM2 {\n  ingestCertifyGood(\n    subject: {artifact: {algorithm: \"md5\", digest: \"0ABCDEF0FEDCBA01234567890ABCDEF0\"}}\n    certifyGood: {justification: \"why2\", origin: \"testing backend\", collector: \"there\"}\n  ) {\n    ...allCertifyGoodTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allCertifyScorecardTree on CertifyScorecard {\n  id\n  source {\n    ...allSrcTree\n  }\n  scorecard {\n    timeScanned\n    aggregateScore\n    checks {\n      check\n      score\n    }\n    scorecardVersion\n    scorecardCommit\n    origin\n    collector\n  }\n}\n\nquery ScorecardQ1 {\n  scorecards(scorecardSpec: {}) {\n    ...allCertifyScorecardTree\n  }\n}\n\nquery ScorecardQ2 {\n  scorecards(scorecardSpec: {origin: \"testing backend\"}) {\n    ...allCertifyScorecardTree\n  }\n}\n\nquery ScorecardQ3 {\n  scorecards(scorecardSpec: {source: {name: \"github.com/tensorflow/tensorflow\"}}) {\n    ...allCertifyScorecardTree\n  }\n}\n\nquery ScorecardQ4 {\n  scorecards(scorecardSpec: {aggregateScore: 2.9}) {\n    ...allCertifyScorecardTree\n  }\n}\n\nmutation Scorecard($source: SourceInputSpec!, $scorecard: ScorecardInputSpec!) {\n  ingestSource(source: $source) {\n    ...allSrcTree\n  }\n  certifyScorecard(source: $source, scorecard: $scorecard) {\n    ...allCertifyScorecardTree\n  }\n}"): (typeof documents)["fragment allCertifyScorecardTree on CertifyScorecard {\n  id\n  source {\n    ...allSrcTree\n  }\n  scorecard {\n    timeScanned\n    aggregateScore\n    checks {\n      check\n      score\n    }\n    scorecardVersion\n    scorecardCommit\n    origin\n    collector\n  }\n}\n\nquery ScorecardQ1 {\n  scorecards(scorecardSpec: {}) {\n    ...allCertifyScorecardTree\n  }\n}\n\nquery ScorecardQ2 {\n  scorecards(scorecardSpec: {origin: \"testing backend\"}) {\n    ...allCertifyScorecardTree\n  }\n}\n\nquery ScorecardQ3 {\n  scorecards(scorecardSpec: {source: {name: \"github.com/tensorflow/tensorflow\"}}) {\n    ...allCertifyScorecardTree\n  }\n}\n\nquery ScorecardQ4 {\n  scorecards(scorecardSpec: {aggregateScore: 2.9}) {\n    ...allCertifyScorecardTree\n  }\n}\n\nmutation Scorecard($source: SourceInputSpec!, $scorecard: ScorecardInputSpec!) {\n  ingestSource(source: $source) {\n    ...allSrcTree\n  }\n  certifyScorecard(source: $source, scorecard: $scorecard) {\n    ...allCertifyScorecardTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allCertifyVEXStatementTree on CertifyVEXStatement {\n  id\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Artifact {\n      id\n      algorithm\n      digest\n    }\n  }\n  vulnerability {\n    __typename\n    ... on CVE {\n      id\n      year\n      cveId\n    }\n    ... on OSV {\n      id\n      osvId\n    }\n    ... on GHSA {\n      id\n      ghsaId\n    }\n  }\n  status\n  vexJustification\n  statement\n  statusNotes\n  knownSince\n  origin\n  collector\n}\n\nquery CertifyVEXStatementQ1 {\n  CertifyVEXStatement(certifyVEXStatementSpec: {}) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ2 {\n  CertifyVEXStatement(certifyVEXStatementSpec: {origin: \"testing backend\"}) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ3 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {subject: {package: {name: \"openssl\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ4 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {subject: {artifact: {algorithm: \"sha256\", digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ5 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {cve: {cveId: \"CVE-2019-13110\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ6 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {ghsa: {ghsaId: \"GHSA-h45f-rjvw-2rv2\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ7 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {cve: {cveId: \"CVE-2018-43610\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ8 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {ghsa: {ghsaId: \"GHSA-hj5f-4gvw-4rv2\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ9 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {osv: {osvId: \"cve-2019-14750\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ10 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {osv: {osvId: \"cve-2018-15710\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}"): (typeof documents)["fragment allCertifyVEXStatementTree on CertifyVEXStatement {\n  id\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Artifact {\n      id\n      algorithm\n      digest\n    }\n  }\n  vulnerability {\n    __typename\n    ... on CVE {\n      id\n      year\n      cveId\n    }\n    ... on OSV {\n      id\n      osvId\n    }\n    ... on GHSA {\n      id\n      ghsaId\n    }\n  }\n  status\n  vexJustification\n  statement\n  statusNotes\n  knownSince\n  origin\n  collector\n}\n\nquery CertifyVEXStatementQ1 {\n  CertifyVEXStatement(certifyVEXStatementSpec: {}) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ2 {\n  CertifyVEXStatement(certifyVEXStatementSpec: {origin: \"testing backend\"}) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ3 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {subject: {package: {name: \"openssl\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ4 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {subject: {artifact: {algorithm: \"sha256\", digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ5 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {cve: {cveId: \"CVE-2019-13110\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ6 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {ghsa: {ghsaId: \"GHSA-h45f-rjvw-2rv2\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ7 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {cve: {cveId: \"CVE-2018-43610\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ8 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {ghsa: {ghsaId: \"GHSA-hj5f-4gvw-4rv2\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ9 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {osv: {osvId: \"cve-2019-14750\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}\n\nquery CertifyVEXStatementQ10 {\n  CertifyVEXStatement(\n    certifyVEXStatementSpec: {vulnerability: {osv: {osvId: \"cve-2018-15710\"}}}\n  ) {\n    ...allCertifyVEXStatementTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allCertifyVulnTree on CertifyVuln {\n  id\n  package {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  vulnerability {\n    __typename\n    ... on CVE {\n      id\n      year\n      cveId\n    }\n    ... on OSV {\n      id\n      osvId\n    }\n    ... on GHSA {\n      id\n      ghsaId\n    }\n    ... on NoVuln {\n      id\n    }\n  }\n  metadata {\n    dbUri\n    dbVersion\n    scannerUri\n    scannerVersion\n    timeScanned\n    origin\n    collector\n  }\n}\n\nquery CertifyVulnQ1 {\n  CertifyVuln(certifyVulnSpec: {}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ2 {\n  CertifyVuln(certifyVulnSpec: {origin: \"testing backend\"}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ3 {\n  CertifyVuln(certifyVulnSpec: {package: {name: \"openssl\"}}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ4 {\n  CertifyVuln(certifyVulnSpec: {package: {name: \"django\"}}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ5 {\n  CertifyVuln(certifyVulnSpec: {vulnerability: {cve: {cveId: \"CVE-2019-13110\"}}}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ6 {\n  CertifyVuln(\n    certifyVulnSpec: {vulnerability: {ghsa: {ghsaId: \"GHSA-h45f-rjvw-2rv2\"}}}\n  ) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ7 {\n  CertifyVuln(certifyVulnSpec: {vulnerability: {osv: {osvId: \"CVE-2019-13110\"}}}) {\n    ...allCertifyVulnTree\n  }\n}"): (typeof documents)["fragment allCertifyVulnTree on CertifyVuln {\n  id\n  package {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  vulnerability {\n    __typename\n    ... on CVE {\n      id\n      year\n      cveId\n    }\n    ... on OSV {\n      id\n      osvId\n    }\n    ... on GHSA {\n      id\n      ghsaId\n    }\n    ... on NoVuln {\n      id\n    }\n  }\n  metadata {\n    dbUri\n    dbVersion\n    scannerUri\n    scannerVersion\n    timeScanned\n    origin\n    collector\n  }\n}\n\nquery CertifyVulnQ1 {\n  CertifyVuln(certifyVulnSpec: {}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ2 {\n  CertifyVuln(certifyVulnSpec: {origin: \"testing backend\"}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ3 {\n  CertifyVuln(certifyVulnSpec: {package: {name: \"openssl\"}}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ4 {\n  CertifyVuln(certifyVulnSpec: {package: {name: \"django\"}}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ5 {\n  CertifyVuln(certifyVulnSpec: {vulnerability: {cve: {cveId: \"CVE-2019-13110\"}}}) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ6 {\n  CertifyVuln(\n    certifyVulnSpec: {vulnerability: {ghsa: {ghsaId: \"GHSA-h45f-rjvw-2rv2\"}}}\n  ) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery CertifyVulnQ7 {\n  CertifyVuln(certifyVulnSpec: {vulnerability: {osv: {osvId: \"CVE-2019-13110\"}}}) {\n    ...allCertifyVulnTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allCveTree on CVE {\n  id\n  year\n  cveId\n}\n\nfragment allGHSATree on GHSA {\n  id\n  ghsaId\n}\n\nfragment allOSVTree on OSV {\n  id\n  osvId\n}\n\nquery CVEQ1 {\n  cve(cveSpec: {}) {\n    ...allCveTree\n  }\n}\n\nquery CVEQ2 {\n  cve(cveSpec: {year: 2014}) {\n    ...allCveTree\n  }\n}\n\nquery CVEQ3 {\n  cve(cveSpec: {cveId: \"CVE-2014-8139\"}) {\n    ...allCveTree\n  }\n}\n\nquery CVEQ4 {\n  cve(cveSpec: {year: 2014, cveId: \"CVE-2014-8140\"}) {\n    ...allCveTree\n  }\n}\n\nmutation CVEM1 {\n  ingestCVE(cve: {year: 2023, cveId: \"CVE-2023-12345\"}) {\n    ...allCveTree\n  }\n}\n\nmutation CVEM2 {\n  ingestCVE(cve: {year: 2032, cveId: \"cve-2032-12345\"}) {\n    ...allCveTree\n  }\n}\n\nquery GHSAQ1 {\n  ghsa(ghsaSpec: {}) {\n    ...allGHSATree\n  }\n}\n\nquery GHSAQ2 {\n  ghsa(ghsaSpec: {ghsaId: \"GHSA-h45f-rjvw-2rv2\"}) {\n    ...allGHSATree\n  }\n}\n\nmutation GHSAM1 {\n  ingestGHSA(ghsa: {ghsaId: \"GHSA-abcd-efgh-1234\"}) {\n    ...allGHSATree\n  }\n}\n\nquery OSVQ1 {\n  osv(osvSpec: {}) {\n    ...allOSVTree\n  }\n}\n\nquery OSVQ2 {\n  osv(osvSpec: {osvId: \"CVE-2014-8139\"}) {\n    ...allOSVTree\n  }\n}\n\nquery OSVQ3 {\n  osv(osvSpec: {osvId: \"ghsa-h45f-rjvw-2rv2\"}) {\n    ...allOSVTree\n  }\n}\n\nmutation OSVM1 {\n  ingestOSV(osv: {osvId: \"GHSA-abcd-efgh-1234\"}) {\n    ...allOSVTree\n  }\n}\n\nmutation OSVM2 {\n  ingestOSV(osv: {osvId: \"CVE-2023-12345\"}) {\n    ...allOSVTree\n  }\n}"): (typeof documents)["fragment allCveTree on CVE {\n  id\n  year\n  cveId\n}\n\nfragment allGHSATree on GHSA {\n  id\n  ghsaId\n}\n\nfragment allOSVTree on OSV {\n  id\n  osvId\n}\n\nquery CVEQ1 {\n  cve(cveSpec: {}) {\n    ...allCveTree\n  }\n}\n\nquery CVEQ2 {\n  cve(cveSpec: {year: 2014}) {\n    ...allCveTree\n  }\n}\n\nquery CVEQ3 {\n  cve(cveSpec: {cveId: \"CVE-2014-8139\"}) {\n    ...allCveTree\n  }\n}\n\nquery CVEQ4 {\n  cve(cveSpec: {year: 2014, cveId: \"CVE-2014-8140\"}) {\n    ...allCveTree\n  }\n}\n\nmutation CVEM1 {\n  ingestCVE(cve: {year: 2023, cveId: \"CVE-2023-12345\"}) {\n    ...allCveTree\n  }\n}\n\nmutation CVEM2 {\n  ingestCVE(cve: {year: 2032, cveId: \"cve-2032-12345\"}) {\n    ...allCveTree\n  }\n}\n\nquery GHSAQ1 {\n  ghsa(ghsaSpec: {}) {\n    ...allGHSATree\n  }\n}\n\nquery GHSAQ2 {\n  ghsa(ghsaSpec: {ghsaId: \"GHSA-h45f-rjvw-2rv2\"}) {\n    ...allGHSATree\n  }\n}\n\nmutation GHSAM1 {\n  ingestGHSA(ghsa: {ghsaId: \"GHSA-abcd-efgh-1234\"}) {\n    ...allGHSATree\n  }\n}\n\nquery OSVQ1 {\n  osv(osvSpec: {}) {\n    ...allOSVTree\n  }\n}\n\nquery OSVQ2 {\n  osv(osvSpec: {osvId: \"CVE-2014-8139\"}) {\n    ...allOSVTree\n  }\n}\n\nquery OSVQ3 {\n  osv(osvSpec: {osvId: \"ghsa-h45f-rjvw-2rv2\"}) {\n    ...allOSVTree\n  }\n}\n\nmutation OSVM1 {\n  ingestOSV(osv: {osvId: \"GHSA-abcd-efgh-1234\"}) {\n    ...allOSVTree\n  }\n}\n\nmutation OSVM2 {\n  ingestOSV(osv: {osvId: \"CVE-2023-12345\"}) {\n    ...allOSVTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allHasSBOMTree on HasSBOM {\n  id\n  uri\n  annotation\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Source {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          tag\n          commit\n        }\n      }\n    }\n  }\n  origin\n  collector\n}\n\nquery HasSBOMQ1 {\n  HasSBOM(hasSBOMSpec: {}) {\n    ...allHasSBOMTree\n  }\n}\n\nquery HasSBOMQ2 {\n  HasSBOM(hasSBOMSpec: {origin: \"testing backend\"}) {\n    ...allHasSBOMTree\n  }\n}\n\nquery HasSBOMQ3 {\n  HasSBOM(hasSBOMSpec: {subject: {package: {name: \"openssl\"}}}) {\n    ...allHasSBOMTree\n  }\n}\n\nquery HasSBOMQ4 {\n  HasSBOM(hasSBOMSpec: {subject: {source: {name: \"github.com/guacsec/guac\"}}}) {\n    ...allHasSBOMTree\n  }\n}\n\nquery HasSBOMQ5 {\n  HasSBOM(\n    hasSBOMSpec: {subject: {package: {name: \"openssl\"}, source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allHasSBOMTree\n  }\n}"): (typeof documents)["fragment allHasSBOMTree on HasSBOM {\n  id\n  uri\n  annotation\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Source {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          tag\n          commit\n        }\n      }\n    }\n  }\n  origin\n  collector\n}\n\nquery HasSBOMQ1 {\n  HasSBOM(hasSBOMSpec: {}) {\n    ...allHasSBOMTree\n  }\n}\n\nquery HasSBOMQ2 {\n  HasSBOM(hasSBOMSpec: {origin: \"testing backend\"}) {\n    ...allHasSBOMTree\n  }\n}\n\nquery HasSBOMQ3 {\n  HasSBOM(hasSBOMSpec: {subject: {package: {name: \"openssl\"}}}) {\n    ...allHasSBOMTree\n  }\n}\n\nquery HasSBOMQ4 {\n  HasSBOM(hasSBOMSpec: {subject: {source: {name: \"github.com/guacsec/guac\"}}}) {\n    ...allHasSBOMTree\n  }\n}\n\nquery HasSBOMQ5 {\n  HasSBOM(\n    hasSBOMSpec: {subject: {package: {name: \"openssl\"}, source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allHasSBOMTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allHasSLSATree on HasSLSA {\n  id\n  subject {\n    id\n    algorithm\n    digest\n  }\n  slsa {\n    builtFrom {\n      id\n      algorithm\n      digest\n    }\n    builtBy {\n      id\n      uri\n    }\n    buildType\n    slsaPredicate {\n      key\n      value\n    }\n    slsaVersion\n    startedOn\n    finishedOn\n    origin\n    collector\n  }\n}\n\nquery SLSAQ1 {\n  HasSLSA(hasSLSASpec: {}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ2 {\n  HasSLSA(hasSLSASpec: {origin: \"Demo ingestion\"}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ3 {\n  HasSLSA(hasSLSASpec: {subject: {algorithm: \"sha1\"}}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ4 {\n  HasSLSA(hasSLSASpec: {builtFrom: [{algorithm: \"sha256\"}]}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ5 {\n  HasSLSA(hasSLSASpec: {id: \"47\"}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ6 {\n  HasSLSA(\n    hasSLSASpec: {predicate: {key: \"buildDefinition.externalParameters.ref\", value: \"refs/heads/main\"}}\n  ) {\n    ...allHasSLSATree\n  }\n}\n\nfragment allArtifactTree on Artifact {\n  id\n  algorithm\n  digest\n}\n\nmutation SLSAM1 {\n  ingestSLSA(\n    subject: {algorithm: \"md5\", digest: \"2b00042f7481c7b056c4b410d28f33cf\"}\n    builtFrom: [{algorithm: \"md5\", digest: \"0ABCDEF0FEDCBA01234567890ABCDEF0\"}]\n    builtBy: {uri: \"https://github.com/Attestations/GitHubHostedActions@v2\"}\n    slsa: {buildType: \"type\", slsaVersion: \"v1\", origin: \"here\", collector: \"there\", startedOn: \"2023-03-28T11:01:23-07:00\", finishedOn: \"2023-03-28T11:01:35-07:00\", slsaPredicate: [{key: \"key1\", value: \"value1\"}]}\n  ) {\n    ...allHasSLSATree\n  }\n}"): (typeof documents)["fragment allHasSLSATree on HasSLSA {\n  id\n  subject {\n    id\n    algorithm\n    digest\n  }\n  slsa {\n    builtFrom {\n      id\n      algorithm\n      digest\n    }\n    builtBy {\n      id\n      uri\n    }\n    buildType\n    slsaPredicate {\n      key\n      value\n    }\n    slsaVersion\n    startedOn\n    finishedOn\n    origin\n    collector\n  }\n}\n\nquery SLSAQ1 {\n  HasSLSA(hasSLSASpec: {}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ2 {\n  HasSLSA(hasSLSASpec: {origin: \"Demo ingestion\"}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ3 {\n  HasSLSA(hasSLSASpec: {subject: {algorithm: \"sha1\"}}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ4 {\n  HasSLSA(hasSLSASpec: {builtFrom: [{algorithm: \"sha256\"}]}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ5 {\n  HasSLSA(hasSLSASpec: {id: \"47\"}) {\n    ...allHasSLSATree\n  }\n}\n\nquery SLSAQ6 {\n  HasSLSA(\n    hasSLSASpec: {predicate: {key: \"buildDefinition.externalParameters.ref\", value: \"refs/heads/main\"}}\n  ) {\n    ...allHasSLSATree\n  }\n}\n\nfragment allArtifactTree on Artifact {\n  id\n  algorithm\n  digest\n}\n\nmutation SLSAM1 {\n  ingestSLSA(\n    subject: {algorithm: \"md5\", digest: \"2b00042f7481c7b056c4b410d28f33cf\"}\n    builtFrom: [{algorithm: \"md5\", digest: \"0ABCDEF0FEDCBA01234567890ABCDEF0\"}]\n    builtBy: {uri: \"https://github.com/Attestations/GitHubHostedActions@v2\"}\n    slsa: {buildType: \"type\", slsaVersion: \"v1\", origin: \"here\", collector: \"there\", startedOn: \"2023-03-28T11:01:23-07:00\", finishedOn: \"2023-03-28T11:01:35-07:00\", slsaPredicate: [{key: \"key1\", value: \"value1\"}]}\n  ) {\n    ...allHasSLSATree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allHasSourceAtTree on HasSourceAt {\n  id\n  justification\n  knownSince\n  package {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  source {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        tag\n        commit\n      }\n    }\n  }\n  origin\n  collector\n}\n\nquery HasSourceAtQ1 {\n  HasSourceAt(hasSourceAtSpec: {}) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ2 {\n  HasSourceAt(hasSourceAtSpec: {origin: \"testing backend\"}) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ3 {\n  HasSourceAt(hasSourceAtSpec: {package: {name: \"openssl\", version: \"3.0.3\"}}) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ4 {\n  HasSourceAt(\n    hasSourceAtSpec: {source: {name: \"https://github.com/django/django\"}}\n  ) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ5 {\n  HasSourceAt(hasSourceAtSpec: {package: {name: \"kubetest\"}}) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ6 {\n  HasSourceAt(\n    hasSourceAtSpec: {source: {name: \"https://github.com/vapor-ware/kubetest\"}}\n  ) {\n    ...allHasSourceAtTree\n  }\n}"): (typeof documents)["fragment allHasSourceAtTree on HasSourceAt {\n  id\n  justification\n  knownSince\n  package {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  source {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        tag\n        commit\n      }\n    }\n  }\n  origin\n  collector\n}\n\nquery HasSourceAtQ1 {\n  HasSourceAt(hasSourceAtSpec: {}) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ2 {\n  HasSourceAt(hasSourceAtSpec: {origin: \"testing backend\"}) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ3 {\n  HasSourceAt(hasSourceAtSpec: {package: {name: \"openssl\", version: \"3.0.3\"}}) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ4 {\n  HasSourceAt(\n    hasSourceAtSpec: {source: {name: \"https://github.com/django/django\"}}\n  ) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ5 {\n  HasSourceAt(hasSourceAtSpec: {package: {name: \"kubetest\"}}) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery HasSourceAtQ6 {\n  HasSourceAt(\n    hasSourceAtSpec: {source: {name: \"https://github.com/vapor-ware/kubetest\"}}\n  ) {\n    ...allHasSourceAtTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allHashEqualTree on HashEqual {\n  id\n  justification\n  artifacts {\n    id\n    algorithm\n    digest\n  }\n  origin\n  collector\n}\n\nquery HashEqualQ1 {\n  HashEqual(hashEqualSpec: {}) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ2 {\n  HashEqual(hashEqualSpec: {origin: \"testing backend\"}) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ3 {\n  HashEqual(\n    hashEqualSpec: {artifacts: [{algorithm: \"sha1\", digest: \"7a8f47318e4676dacb0142afa0b83029cd7befd9\"}]}\n  ) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ4 {\n  HashEqual(\n    hashEqualSpec: {artifacts: [{algorithm: \"sha256\", digest: \"89bb0da1891646e58eb3e6ed24f3a6fc3c8eb5a0d44824cba581dfa34a0450cf\"}]}\n  ) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ5 {\n  HashEqual(\n    hashEqualSpec: {artifacts: [{algorithm: \"sha256\", digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\"}]}\n  ) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ6 {\n  HashEqual(\n    hashEqualSpec: {artifacts: [{algorithm: \"sha512\", digest: \"374ab8f711235830769aa5f0b31ce9b72c5670074b34cb302cdafe3b606233ee92ee01e298e5701f15cc7087714cd9abd7ddb838a6e1206b3642de16d9fc9dd7\"}]}\n  ) {\n    ...allHashEqualTree\n  }\n}"): (typeof documents)["fragment allHashEqualTree on HashEqual {\n  id\n  justification\n  artifacts {\n    id\n    algorithm\n    digest\n  }\n  origin\n  collector\n}\n\nquery HashEqualQ1 {\n  HashEqual(hashEqualSpec: {}) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ2 {\n  HashEqual(hashEqualSpec: {origin: \"testing backend\"}) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ3 {\n  HashEqual(\n    hashEqualSpec: {artifacts: [{algorithm: \"sha1\", digest: \"7a8f47318e4676dacb0142afa0b83029cd7befd9\"}]}\n  ) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ4 {\n  HashEqual(\n    hashEqualSpec: {artifacts: [{algorithm: \"sha256\", digest: \"89bb0da1891646e58eb3e6ed24f3a6fc3c8eb5a0d44824cba581dfa34a0450cf\"}]}\n  ) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ5 {\n  HashEqual(\n    hashEqualSpec: {artifacts: [{algorithm: \"sha256\", digest: \"6bbb0da1891646e58eb3e6a63af3a6fc3c8eb5a0d44824cba581d2e14a0450cf\"}]}\n  ) {\n    ...allHashEqualTree\n  }\n}\n\nquery HashEqualQ6 {\n  HashEqual(\n    hashEqualSpec: {artifacts: [{algorithm: \"sha512\", digest: \"374ab8f711235830769aa5f0b31ce9b72c5670074b34cb302cdafe3b606233ee92ee01e298e5701f15cc7087714cd9abd7ddb838a6e1206b3642de16d9fc9dd7\"}]}\n  ) {\n    ...allHashEqualTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allIsDependencyTree on IsDependency {\n  id\n  justification\n  package {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  dependentPackage {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  versionRange\n  origin\n  collector\n}\n\nquery IsDepedencyQ1 {\n  IsDependency(isDependencySpec: {}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ2 {\n  IsDependency(isDependencySpec: {origin: \"testing backend\"}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ3 {\n  IsDependency(isDependencySpec: {package: {name: \"debian\"}}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ4 {\n  IsDependency(isDependencySpec: {package: {name: \"dpkg\"}}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ5 {\n  IsDependency(isDependencySpec: {package: {name: \"openssl\", version: \"3.0.3\"}}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ6 {\n  IsDependency(isDependencySpec: {dependentPackage: {name: \"openssl\"}}) {\n    ...allIsDependencyTree\n  }\n}"): (typeof documents)["fragment allIsDependencyTree on IsDependency {\n  id\n  justification\n  package {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  dependentPackage {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  versionRange\n  origin\n  collector\n}\n\nquery IsDepedencyQ1 {\n  IsDependency(isDependencySpec: {}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ2 {\n  IsDependency(isDependencySpec: {origin: \"testing backend\"}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ3 {\n  IsDependency(isDependencySpec: {package: {name: \"debian\"}}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ4 {\n  IsDependency(isDependencySpec: {package: {name: \"dpkg\"}}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ5 {\n  IsDependency(isDependencySpec: {package: {name: \"openssl\", version: \"3.0.3\"}}) {\n    ...allIsDependencyTree\n  }\n}\n\nquery IsDepedencyQ6 {\n  IsDependency(isDependencySpec: {dependentPackage: {name: \"openssl\"}}) {\n    ...allIsDependencyTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allIsOccurrencesTree on IsOccurrence {\n  id\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Source {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          tag\n          commit\n        }\n      }\n    }\n  }\n  artifact {\n    id\n    algorithm\n    digest\n  }\n  justification\n  origin\n  collector\n}\n\nquery IsOccurrenceQ1 {\n  IsOccurrence(isOccurrenceSpec: {}) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ2 {\n  IsOccurrence(isOccurrenceSpec: {origin: \"testing backend\"}) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ3 {\n  IsOccurrence(isOccurrenceSpec: {subject: {package: {name: \"openssl\"}}}) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ4 {\n  IsOccurrence(\n    isOccurrenceSpec: {subject: {package: {name: \"openssl\", version: \"3.0.3\"}}}\n  ) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ5 {\n  IsOccurrence(\n    isOccurrenceSpec: {subject: {source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ6 {\n  IsOccurrence(\n    isOccurrenceSpec: {subject: {package: {name: \"openssl\"}, source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allIsOccurrencesTree\n  }\n}"): (typeof documents)["fragment allIsOccurrencesTree on IsOccurrence {\n  id\n  subject {\n    __typename\n    ... on Package {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          versions {\n            id\n            version\n            qualifiers {\n              key\n              value\n            }\n            subpath\n          }\n        }\n      }\n    }\n    ... on Source {\n      id\n      type\n      namespaces {\n        id\n        namespace\n        names {\n          id\n          name\n          tag\n          commit\n        }\n      }\n    }\n  }\n  artifact {\n    id\n    algorithm\n    digest\n  }\n  justification\n  origin\n  collector\n}\n\nquery IsOccurrenceQ1 {\n  IsOccurrence(isOccurrenceSpec: {}) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ2 {\n  IsOccurrence(isOccurrenceSpec: {origin: \"testing backend\"}) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ3 {\n  IsOccurrence(isOccurrenceSpec: {subject: {package: {name: \"openssl\"}}}) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ4 {\n  IsOccurrence(\n    isOccurrenceSpec: {subject: {package: {name: \"openssl\", version: \"3.0.3\"}}}\n  ) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ5 {\n  IsOccurrence(\n    isOccurrenceSpec: {subject: {source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery IsOccurrenceQ6 {\n  IsOccurrence(\n    isOccurrenceSpec: {subject: {package: {name: \"openssl\"}, source: {name: \"github.com/guacsec/guac\"}}}\n  ) {\n    ...allIsOccurrencesTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allIsVulnerabilityTree on IsVulnerability {\n  id\n  osv {\n    id\n    osvId\n  }\n  vulnerability {\n    __typename\n    ... on CVE {\n      id\n      year\n      cveId\n    }\n    ... on GHSA {\n      id\n      ghsaId\n    }\n  }\n  justification\n  origin\n  collector\n}\n\nquery IsVulnerabilityQ1 {\n  IsVulnerability(isVulnerabilitySpec: {}) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ2 {\n  IsVulnerability(isVulnerabilitySpec: {origin: \"testing backend\"}) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ3 {\n  IsVulnerability(isVulnerabilitySpec: {osv: {osvId: \"GHSA-h45f-rjvw-2rv2\"}}) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ4 {\n  IsVulnerability(isVulnerabilitySpec: {osv: {osvId: \"CVE-2019-13110\"}}) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ5 {\n  IsVulnerability(\n    isVulnerabilitySpec: {vulnerability: {cve: {cveId: \"CVE-2019-13110\"}}}\n  ) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ6 {\n  IsVulnerability(\n    isVulnerabilitySpec: {vulnerability: {ghsa: {ghsaId: \"GHSA-h45f-rjvw-2rv2\"}}}\n  ) {\n    ...allIsVulnerabilityTree\n  }\n}"): (typeof documents)["fragment allIsVulnerabilityTree on IsVulnerability {\n  id\n  osv {\n    id\n    osvId\n  }\n  vulnerability {\n    __typename\n    ... on CVE {\n      id\n      year\n      cveId\n    }\n    ... on GHSA {\n      id\n      ghsaId\n    }\n  }\n  justification\n  origin\n  collector\n}\n\nquery IsVulnerabilityQ1 {\n  IsVulnerability(isVulnerabilitySpec: {}) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ2 {\n  IsVulnerability(isVulnerabilitySpec: {origin: \"testing backend\"}) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ3 {\n  IsVulnerability(isVulnerabilitySpec: {osv: {osvId: \"GHSA-h45f-rjvw-2rv2\"}}) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ4 {\n  IsVulnerability(isVulnerabilitySpec: {osv: {osvId: \"CVE-2019-13110\"}}) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ5 {\n  IsVulnerability(\n    isVulnerabilitySpec: {vulnerability: {cve: {cveId: \"CVE-2019-13110\"}}}\n  ) {\n    ...allIsVulnerabilityTree\n  }\n}\n\nquery IsVulnerabilityQ6 {\n  IsVulnerability(\n    isVulnerabilitySpec: {vulnerability: {ghsa: {ghsaId: \"GHSA-h45f-rjvw-2rv2\"}}}\n  ) {\n    ...allIsVulnerabilityTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allPkgTree on Package {\n  id\n  type\n  namespaces {\n    id\n    namespace\n    names {\n      id\n      name\n      versions {\n        id\n        version\n        qualifiers {\n          key\n          value\n        }\n        subpath\n      }\n    }\n  }\n}\n\nquery PkgQ1 {\n  packages(pkgSpec: {}) {\n    type\n    namespaces {\n      namespace\n      names {\n        name\n      }\n    }\n  }\n}\n\nquery PkgQ2 {\n  packages(pkgSpec: {}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ3 {\n  packages(pkgSpec: {type: \"pypi\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ4 {\n  packages(pkgSpec: {type: \"pypi\", namespace: \"debian\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ5 {\n  packages(pkgSpec: {type: \"deb\", namespace: \"debian\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ6 {\n  packages(pkgSpec: {type: \"deb\", namespace: \"ubuntu\", name: \"dpkg\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ7 {\n  packages(pkgSpec: {type: \"deb\", name: \"dpkg\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ8 {\n  packages(pkgSpec: {name: \"openssl\", version: \"3.0.3\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ9 {\n  packages(pkgSpec: {name: \"openssl\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQA {\n  packages(pkgSpec: {qualifiers: [{key: \"arch\", value: \"amd64\"}]}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQB {\n  packages(\n    pkgSpec: {qualifiers: [{key: \"arch\", value: \"amd64\"}, {key: \"distro\", value: \"stretch\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQC {\n  packages(pkgSpec: {subpath: \"subpath\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQD {\n  packages(pkgSpec: {matchOnlyEmptyQualifiers: true}) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM1 {\n  ingestPackage(pkg: {type: \"pypi\", name: \"tensorflow\"}) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM2 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", qualifiers: [{key: \"arch\", value: \"amd64\"}, {key: \"distro\", value: \"stretch\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM3 {\n  ingestPackage(pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\"}) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM4 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\", qualifiers: [{key: \"arch\", value: \"amd64\"}, {key: \"distro\", value: \"stretch\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM5 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\", qualifiers: [{key: \"distro\", value: \"stretch\"}, {key: \"arch\", value: \"amd64\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM6 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\", subpath: \"foo\", qualifiers: [{key: \"distro\", value: \"stretch\"}, {key: \"arch\", value: \"amd64\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM7 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\", subpath: \"foo\", qualifiers: [{key: \"distro\", value: \"stretch\"}, {key: \"arch\", value: \"amd64\"}]}\n  ) {\n    namespaces {\n      names {\n        versions {\n          qualifiers {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["fragment allPkgTree on Package {\n  id\n  type\n  namespaces {\n    id\n    namespace\n    names {\n      id\n      name\n      versions {\n        id\n        version\n        qualifiers {\n          key\n          value\n        }\n        subpath\n      }\n    }\n  }\n}\n\nquery PkgQ1 {\n  packages(pkgSpec: {}) {\n    type\n    namespaces {\n      namespace\n      names {\n        name\n      }\n    }\n  }\n}\n\nquery PkgQ2 {\n  packages(pkgSpec: {}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ3 {\n  packages(pkgSpec: {type: \"pypi\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ4 {\n  packages(pkgSpec: {type: \"pypi\", namespace: \"debian\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ5 {\n  packages(pkgSpec: {type: \"deb\", namespace: \"debian\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ6 {\n  packages(pkgSpec: {type: \"deb\", namespace: \"ubuntu\", name: \"dpkg\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ7 {\n  packages(pkgSpec: {type: \"deb\", name: \"dpkg\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ8 {\n  packages(pkgSpec: {name: \"openssl\", version: \"3.0.3\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQ9 {\n  packages(pkgSpec: {name: \"openssl\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQA {\n  packages(pkgSpec: {qualifiers: [{key: \"arch\", value: \"amd64\"}]}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQB {\n  packages(\n    pkgSpec: {qualifiers: [{key: \"arch\", value: \"amd64\"}, {key: \"distro\", value: \"stretch\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQC {\n  packages(pkgSpec: {subpath: \"subpath\"}) {\n    ...allPkgTree\n  }\n}\n\nquery PkgQD {\n  packages(pkgSpec: {matchOnlyEmptyQualifiers: true}) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM1 {\n  ingestPackage(pkg: {type: \"pypi\", name: \"tensorflow\"}) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM2 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", qualifiers: [{key: \"arch\", value: \"amd64\"}, {key: \"distro\", value: \"stretch\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM3 {\n  ingestPackage(pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\"}) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM4 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\", qualifiers: [{key: \"arch\", value: \"amd64\"}, {key: \"distro\", value: \"stretch\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM5 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\", qualifiers: [{key: \"distro\", value: \"stretch\"}, {key: \"arch\", value: \"amd64\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM6 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\", subpath: \"foo\", qualifiers: [{key: \"distro\", value: \"stretch\"}, {key: \"arch\", value: \"amd64\"}]}\n  ) {\n    ...allPkgTree\n  }\n}\n\nmutation PkgM7 {\n  ingestPackage(\n    pkg: {type: \"pypi\", name: \"tensorflow\", version: \"2.12.0\", subpath: \"foo\", qualifiers: [{key: \"distro\", value: \"stretch\"}, {key: \"arch\", value: \"amd64\"}]}\n  ) {\n    namespaces {\n      names {\n        versions {\n          qualifiers {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allPkgEqualTree on PkgEqual {\n  id\n  justification\n  packages {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  origin\n  collector\n}\n\nquery PkgEqualQ1 {\n  PkgEqual(pkgEqualSpec: {}) {\n    ...allPkgEqualTree\n  }\n}\n\nquery PkgEqualQ2 {\n  PkgEqual(pkgEqualSpec: {origin: \"Demo ingestion\"}) {\n    ...allPkgEqualTree\n  }\n}\n\nquery PkgEqualQ3 {\n  PkgEqual(\n    pkgEqualSpec: {packages: {type: \"conan\", namespace: \"openssl.org\", name: \"openssl\", version: \"3.0.3\", subpath: \"\"}}\n  ) {\n    ...allPkgEqualTree\n  }\n}\n\nquery PkgEqualQ4 {\n  PkgEqual(\n    pkgEqualSpec: {packages: {type: \"pypi\", namespace: \"\", name: \"django\", version: \"1.11.1\", subpath: \"subpath\"}}\n  ) {\n    ...allPkgEqualTree\n  }\n}\n\nquery PkgEqualQ5 {\n  PkgEqual(pkgEqualSpec: {packages: {type: \"deb\", namespace: \"debian\"}}) {\n    ...allPkgEqualTree\n  }\n}"): (typeof documents)["fragment allPkgEqualTree on PkgEqual {\n  id\n  justification\n  packages {\n    id\n    type\n    namespaces {\n      id\n      namespace\n      names {\n        id\n        name\n        versions {\n          id\n          version\n          qualifiers {\n            key\n            value\n          }\n          subpath\n        }\n      }\n    }\n  }\n  origin\n  collector\n}\n\nquery PkgEqualQ1 {\n  PkgEqual(pkgEqualSpec: {}) {\n    ...allPkgEqualTree\n  }\n}\n\nquery PkgEqualQ2 {\n  PkgEqual(pkgEqualSpec: {origin: \"Demo ingestion\"}) {\n    ...allPkgEqualTree\n  }\n}\n\nquery PkgEqualQ3 {\n  PkgEqual(\n    pkgEqualSpec: {packages: {type: \"conan\", namespace: \"openssl.org\", name: \"openssl\", version: \"3.0.3\", subpath: \"\"}}\n  ) {\n    ...allPkgEqualTree\n  }\n}\n\nquery PkgEqualQ4 {\n  PkgEqual(\n    pkgEqualSpec: {packages: {type: \"pypi\", namespace: \"\", name: \"django\", version: \"1.11.1\", subpath: \"subpath\"}}\n  ) {\n    ...allPkgEqualTree\n  }\n}\n\nquery PkgEqualQ5 {\n  PkgEqual(pkgEqualSpec: {packages: {type: \"deb\", namespace: \"debian\"}}) {\n    ...allPkgEqualTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment allSrcTree on Source {\n  id\n  type\n  namespaces {\n    id\n    namespace\n    names {\n      id\n      name\n      tag\n      commit\n    }\n  }\n}\n\nquery SrcQ1 {\n  sources(sourceSpec: {}) {\n    namespaces {\n      names {\n        name\n      }\n    }\n  }\n}\n\nquery SrcQ2 {\n  sources(sourceSpec: {}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ3 {\n  sources(sourceSpec: {tag: \"\", commit: \"\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ4 {\n  sources(sourceSpec: {name: \"github.com/guacsec/guac\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ5 {\n  sources(sourceSpec: {tag: \"v0.0.1\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ6 {\n  sources(sourceSpec: {commit: \"fcba958b73e27cad8b5c8655d46439984d27853b\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ7 {\n  sources(sourceSpec: {type: \"svn\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ8 {\n  sources(sourceSpec: {namespace: \"gitlab\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ9 {\n  sources(sourceSpec: {tag: \"asd\", commit: \"sad\"}) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM1 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\"}\n  ) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM2 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", commit: \"4fd637ad9d674c88c50d56a5d47cd77f6032e609\"}\n  ) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM3 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", tag: \"v2.12.0\"}\n  ) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM4 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", commit: \"4fd637ad9d674c88c50d56a5d47cd77f6032e609\", tag: \"2.12.0\"}\n  ) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM5 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", tag: \"v2.12.0\"}\n  ) {\n    namespaces {\n      names {\n        name\n      }\n    }\n  }\n}\n\nmutation SrcM6 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", commit: \"\", tag: \"v2.12.0\"}\n  ) {\n    ...allSrcTree\n  }\n}"): (typeof documents)["fragment allSrcTree on Source {\n  id\n  type\n  namespaces {\n    id\n    namespace\n    names {\n      id\n      name\n      tag\n      commit\n    }\n  }\n}\n\nquery SrcQ1 {\n  sources(sourceSpec: {}) {\n    namespaces {\n      names {\n        name\n      }\n    }\n  }\n}\n\nquery SrcQ2 {\n  sources(sourceSpec: {}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ3 {\n  sources(sourceSpec: {tag: \"\", commit: \"\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ4 {\n  sources(sourceSpec: {name: \"github.com/guacsec/guac\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ5 {\n  sources(sourceSpec: {tag: \"v0.0.1\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ6 {\n  sources(sourceSpec: {commit: \"fcba958b73e27cad8b5c8655d46439984d27853b\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ7 {\n  sources(sourceSpec: {type: \"svn\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ8 {\n  sources(sourceSpec: {namespace: \"gitlab\"}) {\n    ...allSrcTree\n  }\n}\n\nquery SrcQ9 {\n  sources(sourceSpec: {tag: \"asd\", commit: \"sad\"}) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM1 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\"}\n  ) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM2 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", commit: \"4fd637ad9d674c88c50d56a5d47cd77f6032e609\"}\n  ) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM3 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", tag: \"v2.12.0\"}\n  ) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM4 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", commit: \"4fd637ad9d674c88c50d56a5d47cd77f6032e609\", tag: \"2.12.0\"}\n  ) {\n    ...allSrcTree\n  }\n}\n\nmutation SrcM5 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", tag: \"v2.12.0\"}\n  ) {\n    namespaces {\n      names {\n        name\n      }\n    }\n  }\n}\n\nmutation SrcM6 {\n  ingestSource(\n    source: {type: \"git\", namespace: \"github\", name: \"github.com/tensorflow/tensorflow\", commit: \"\", tag: \"v2.12.0\"}\n  ) {\n    ...allSrcTree\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetPkg($spec: PkgSpec) {\n  packages(pkgSpec: $spec) {\n    ...allPkgTree\n  }\n}\n\nquery GetPkgTypes {\n  packages(pkgSpec: {}) {\n    type\n  }\n}\n\nquery GetPkgNamespaces($spec: PkgSpec) {\n  packages(pkgSpec: $spec) {\n    type\n    namespaces {\n      namespace\n    }\n  }\n}\n\nquery GetPkgNames($spec: PkgSpec) {\n  packages(pkgSpec: $spec) {\n    type\n    namespaces {\n      namespace\n      names {\n        name\n      }\n    }\n  }\n}\n\nquery GetPkgVersions($spec: PkgSpec) {\n  packages(pkgSpec: $spec) {\n    type\n    namespaces {\n      namespace\n      names {\n        name\n        versions {\n          version\n          qualifiers {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetSrc($spec: SourceSpec) {\n  sources(sourceSpec: $spec) {\n    ...allSrcTree\n  }\n}\n\nquery GetArtifact($spec: ArtifactSpec) {\n  artifacts(artifactSpec: $spec) {\n    ...allArtifactTree\n  }\n}\n\nquery GetCve($spec: CVESpec) {\n  cve(cveSpec: $spec) {\n    ...allCveTree\n  }\n}\n\nquery GetIsDepedency($spec: IsDependencySpec) {\n  IsDependency(isDependencySpec: $spec) {\n    ...allIsDependencyTree\n  }\n}\n\nquery GetIsOccurrence($spec: IsOccurrenceSpec) {\n  IsOccurrence(isOccurrenceSpec: $spec) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery GetHasSourceAt($spec: HasSourceAtSpec) {\n  HasSourceAt(hasSourceAtSpec: $spec) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery GetCertifyVuln($spec: CertifyVulnSpec) {\n  CertifyVuln(certifyVulnSpec: $spec) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery GetCertifyBad($spec: CertifyBadSpec) {\n  CertifyBad(certifyBadSpec: $spec) {\n    ...allCertifyBadTree\n  }\n}\n\nquery GetCertifyGood($spec: CertifyGoodSpec) {\n  CertifyGood(certifyGoodSpec: $spec) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery GetNeighbors($nodeId: ID!, $edges: [Edge!]!) {\n  neighbors(node: $nodeId, usingOnly: $edges) {\n    __typename\n    ... on Package {\n      ...allPkgTree\n    }\n    ... on Source {\n      ...allSrcTree\n    }\n    ... on Artifact {\n      ...allArtifactTree\n    }\n    ... on Builder {\n      ...allBuilderTree\n    }\n    ... on OSV {\n      ...allOSVTree\n    }\n    ... on CVE {\n      ...allCveTree\n    }\n    ... on GHSA {\n      ...allGHSATree\n    }\n    ... on NoVuln {\n      id\n    }\n    ... on IsOccurrence {\n      ...allIsOccurrencesTree\n    }\n    ... on IsDependency {\n      ...allIsDependencyTree\n    }\n    ... on IsVulnerability {\n      ...allIsVulnerabilityTree\n    }\n    ... on CertifyVEXStatement {\n      ...allCertifyVEXStatementTree\n    }\n    ... on HashEqual {\n      ...allHashEqualTree\n    }\n    ... on CertifyBad {\n      ...allCertifyBadTree\n    }\n    ... on CertifyGood {\n      ...allCertifyGoodTree\n    }\n    ... on CertifyBad {\n      ...allCertifyBadTree\n    }\n    ... on PkgEqual {\n      ...allPkgEqualTree\n    }\n    ... on CertifyScorecard {\n      ...allCertifyScorecardTree\n    }\n    ... on CertifyVuln {\n      ...allCertifyVulnTree\n    }\n    ... on HasSourceAt {\n      ...allHasSourceAtTree\n    }\n    ... on HasSBOM {\n      ...allHasSBOMTree\n    }\n    ... on HasSLSA {\n      ...allHasSLSATree\n    }\n  }\n}\n\nquery GetNode($nodeId: ID!) {\n  node(node: $nodeId) {\n    __typename\n    ... on Package {\n      ...allPkgTree\n    }\n    ... on Source {\n      ...allSrcTree\n    }\n    ... on Artifact {\n      ...allArtifactTree\n    }\n    ... on Builder {\n      ...allBuilderTree\n    }\n    ... on OSV {\n      ...allOSVTree\n    }\n    ... on CVE {\n      ...allCveTree\n    }\n    ... on GHSA {\n      ...allGHSATree\n    }\n    ... on NoVuln {\n      id\n    }\n    ... on IsOccurrence {\n      ...allIsOccurrencesTree\n    }\n    ... on IsDependency {\n      ...allIsDependencyTree\n    }\n    ... on IsVulnerability {\n      ...allIsVulnerabilityTree\n    }\n    ... on CertifyVEXStatement {\n      ...allCertifyVEXStatementTree\n    }\n    ... on HashEqual {\n      ...allHashEqualTree\n    }\n    ... on CertifyBad {\n      ...allCertifyBadTree\n    }\n    ... on CertifyGood {\n      ...allCertifyGoodTree\n    }\n    ... on CertifyBad {\n      ...allCertifyBadTree\n    }\n    ... on PkgEqual {\n      ...allPkgEqualTree\n    }\n    ... on CertifyScorecard {\n      ...allCertifyScorecardTree\n    }\n    ... on CertifyVuln {\n      ...allCertifyVulnTree\n    }\n    ... on HasSourceAt {\n      ...allHasSourceAtTree\n    }\n    ... on HasSBOM {\n      ...allHasSBOMTree\n    }\n    ... on HasSLSA {\n      ...allHasSLSATree\n    }\n  }\n}"): (typeof documents)["query GetPkg($spec: PkgSpec) {\n  packages(pkgSpec: $spec) {\n    ...allPkgTree\n  }\n}\n\nquery GetPkgTypes {\n  packages(pkgSpec: {}) {\n    type\n  }\n}\n\nquery GetPkgNamespaces($spec: PkgSpec) {\n  packages(pkgSpec: $spec) {\n    type\n    namespaces {\n      namespace\n    }\n  }\n}\n\nquery GetPkgNames($spec: PkgSpec) {\n  packages(pkgSpec: $spec) {\n    type\n    namespaces {\n      namespace\n      names {\n        name\n      }\n    }\n  }\n}\n\nquery GetPkgVersions($spec: PkgSpec) {\n  packages(pkgSpec: $spec) {\n    type\n    namespaces {\n      namespace\n      names {\n        name\n        versions {\n          version\n          qualifiers {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetSrc($spec: SourceSpec) {\n  sources(sourceSpec: $spec) {\n    ...allSrcTree\n  }\n}\n\nquery GetArtifact($spec: ArtifactSpec) {\n  artifacts(artifactSpec: $spec) {\n    ...allArtifactTree\n  }\n}\n\nquery GetCve($spec: CVESpec) {\n  cve(cveSpec: $spec) {\n    ...allCveTree\n  }\n}\n\nquery GetIsDepedency($spec: IsDependencySpec) {\n  IsDependency(isDependencySpec: $spec) {\n    ...allIsDependencyTree\n  }\n}\n\nquery GetIsOccurrence($spec: IsOccurrenceSpec) {\n  IsOccurrence(isOccurrenceSpec: $spec) {\n    ...allIsOccurrencesTree\n  }\n}\n\nquery GetHasSourceAt($spec: HasSourceAtSpec) {\n  HasSourceAt(hasSourceAtSpec: $spec) {\n    ...allHasSourceAtTree\n  }\n}\n\nquery GetCertifyVuln($spec: CertifyVulnSpec) {\n  CertifyVuln(certifyVulnSpec: $spec) {\n    ...allCertifyVulnTree\n  }\n}\n\nquery GetCertifyBad($spec: CertifyBadSpec) {\n  CertifyBad(certifyBadSpec: $spec) {\n    ...allCertifyBadTree\n  }\n}\n\nquery GetCertifyGood($spec: CertifyGoodSpec) {\n  CertifyGood(certifyGoodSpec: $spec) {\n    ...allCertifyGoodTree\n  }\n}\n\nquery GetNeighbors($nodeId: ID!, $edges: [Edge!]!) {\n  neighbors(node: $nodeId, usingOnly: $edges) {\n    __typename\n    ... on Package {\n      ...allPkgTree\n    }\n    ... on Source {\n      ...allSrcTree\n    }\n    ... on Artifact {\n      ...allArtifactTree\n    }\n    ... on Builder {\n      ...allBuilderTree\n    }\n    ... on OSV {\n      ...allOSVTree\n    }\n    ... on CVE {\n      ...allCveTree\n    }\n    ... on GHSA {\n      ...allGHSATree\n    }\n    ... on NoVuln {\n      id\n    }\n    ... on IsOccurrence {\n      ...allIsOccurrencesTree\n    }\n    ... on IsDependency {\n      ...allIsDependencyTree\n    }\n    ... on IsVulnerability {\n      ...allIsVulnerabilityTree\n    }\n    ... on CertifyVEXStatement {\n      ...allCertifyVEXStatementTree\n    }\n    ... on HashEqual {\n      ...allHashEqualTree\n    }\n    ... on CertifyBad {\n      ...allCertifyBadTree\n    }\n    ... on CertifyGood {\n      ...allCertifyGoodTree\n    }\n    ... on CertifyBad {\n      ...allCertifyBadTree\n    }\n    ... on PkgEqual {\n      ...allPkgEqualTree\n    }\n    ... on CertifyScorecard {\n      ...allCertifyScorecardTree\n    }\n    ... on CertifyVuln {\n      ...allCertifyVulnTree\n    }\n    ... on HasSourceAt {\n      ...allHasSourceAtTree\n    }\n    ... on HasSBOM {\n      ...allHasSBOMTree\n    }\n    ... on HasSLSA {\n      ...allHasSLSATree\n    }\n  }\n}\n\nquery GetNode($nodeId: ID!) {\n  node(node: $nodeId) {\n    __typename\n    ... on Package {\n      ...allPkgTree\n    }\n    ... on Source {\n      ...allSrcTree\n    }\n    ... on Artifact {\n      ...allArtifactTree\n    }\n    ... on Builder {\n      ...allBuilderTree\n    }\n    ... on OSV {\n      ...allOSVTree\n    }\n    ... on CVE {\n      ...allCveTree\n    }\n    ... on GHSA {\n      ...allGHSATree\n    }\n    ... on NoVuln {\n      id\n    }\n    ... on IsOccurrence {\n      ...allIsOccurrencesTree\n    }\n    ... on IsDependency {\n      ...allIsDependencyTree\n    }\n    ... on IsVulnerability {\n      ...allIsVulnerabilityTree\n    }\n    ... on CertifyVEXStatement {\n      ...allCertifyVEXStatementTree\n    }\n    ... on HashEqual {\n      ...allHashEqualTree\n    }\n    ... on CertifyBad {\n      ...allCertifyBadTree\n    }\n    ... on CertifyGood {\n      ...allCertifyGoodTree\n    }\n    ... on CertifyBad {\n      ...allCertifyBadTree\n    }\n    ... on PkgEqual {\n      ...allPkgEqualTree\n    }\n    ... on CertifyScorecard {\n      ...allCertifyScorecardTree\n    }\n    ... on CertifyVuln {\n      ...allCertifyVulnTree\n    }\n    ... on HasSourceAt {\n      ...allHasSourceAtTree\n    }\n    ... on HasSBOM {\n      ...allHasSBOMTree\n    }\n    ... on HasSLSA {\n      ...allHasSLSATree\n    }\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;